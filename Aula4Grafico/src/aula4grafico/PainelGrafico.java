/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package aula4grafico;


import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Random;
import java.util.regex.Pattern;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.AxisLocation;
import org.jfree.chart.axis.NumberAxis3D;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.DatasetRenderingOrder;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.renderer.category.CategoryItemRenderer;
import org.jfree.chart.renderer.category.LineAndShapeRenderer;
import org.jfree.data.category.CategoryDataset;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.general.DefaultPieDataset;
import org.jfree.data.general.PieDataset;

 
/**
 *
 * @author m80027
 */
public class PainelGrafico extends javax.swing.JPanel implements ActionListener {
    int[] vetorIdades = new int[50];
    String fraseTela;
    int maiorIdade = -1;
    int faixa;
    int tipoGrafico; //1 bar - 2 pizza
    int[][] vetRanges;
    PieDataset cdsPie;
    CategoryDataset cds;
    
    
    
     //EscolhaDeDados ed;
      //  ExibeGrafico eg;
    /**
     * Creates new form PainelGrafico
     */
    public PainelGrafico() {
        initComponents();
        this.setSize(500,300);
        this.setVisible(false);
        this.gerarGráfico.setVisible(false);
        this.textoComando.setVisible(false);
        this.l1.setVisible(false);
        this.l2.setVisible(false);
        this.l3.setVisible(false);
        //ed = new EscolhaDeDados();       
        
           
        
    }

   
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        voltarPainelGraficoToPrincipal = new javax.swing.JButton();
        entrarDados = new javax.swing.JButton();
        gerarGráfico = new javax.swing.JButton();
        l1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        textoComando = new javax.swing.JTextArea();
        l3 = new javax.swing.JLabel();
        l2 = new javax.swing.JLabel();

        voltarPainelGraficoToPrincipal.setText("Voltar");
        voltarPainelGraficoToPrincipal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                voltarPainelGraficoToPrincipalActionPerformed(evt);
            }
        });

        entrarDados.setText("Entrada de Dados");
        entrarDados.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                entrarDadosActionPerformed(evt);
            }
        });

        gerarGráfico.setText("Ler acomandos");
        gerarGráfico.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gerarGráficoActionPerformed(evt);
            }
        });

        l1.setText("Texto Comando:");

        textoComando.setColumns(20);
        textoComando.setRows(5);
        jScrollPane1.setViewportView(textoComando);

        l3.setText("plotar idade: 1;50;5;10;15;20;30;45;33;14/faixa 5/tipo barra");

        l2.setText("Exemplo de comando:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(entrarDados)
                        .addGap(6, 6, 6)
                        .addComponent(gerarGráfico)
                        .addGap(18, 18, 18)
                        .addComponent(voltarPainelGraficoToPrincipal))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(69, 69, 69)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(113, 113, 113)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(l2)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(11, 11, 11)
                                .addComponent(l1))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addComponent(l3)))
                .addContainerGap(46, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(l1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(l2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 8, Short.MAX_VALUE)
                .addComponent(l3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(entrarDados)
                    .addComponent(gerarGráfico)
                    .addComponent(voltarPainelGraficoToPrincipal))
                .addGap(45, 45, 45))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void voltarPainelGraficoToPrincipalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_voltarPainelGraficoToPrincipalActionPerformed
        this.setVisible(false);
    }//GEN-LAST:event_voltarPainelGraficoToPrincipalActionPerformed

    private void entrarDadosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_entrarDadosActionPerformed
            
            if( this.textoComando.isVisible()){
                
                this.escnderCamposGeracaoGrafico();
            }else{
               this.mostrarCamposGeracaoGrafico();                
               
            }
           
    }//GEN-LAST:event_entrarDadosActionPerformed

    private void gerarGráficoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gerarGráficoActionPerformed
        // TODO add your handling code here:
        this.entrarDados.setVisible(false);
               

       // int[] idades = this.tratarTxtComandoPlotarIdades(txtPlotar);
        
        int[] idades = new int[50];     
        
        
        this.criaGrafico();
        this.setVisible(true);
    }//GEN-LAST:event_gerarGráficoActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JButton entrarDados;
    public javax.swing.JButton gerarGráfico;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel l1;
    private javax.swing.JLabel l2;
    private javax.swing.JLabel l3;
    public javax.swing.JTextArea textoComando;
    public javax.swing.JButton voltarPainelGraficoToPrincipal;
    // End of variables declaration//GEN-END:variables

    @Override
    public void actionPerformed(ActionEvent e) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
    
   public void preparaDataset() {
        //String[] idades = fraseTela.split (";");
        String fraseTela = this.textoComando.getText();
       // String fraseTela = "plotar idade: 1;50;57;57;58;5;10;15;20;30;45;33;14/faixa 5/tipo 1";
        String[] frases = fraseTela.split ("/");  
        for (String frase : frases) {
            
            if(frase.substring(0,6).equals("plotar")){               
                String[] idadesTela = frase.substring(14).split(";");
                //prepara vetor idades
                for (int i = 0; i < idadesTela.length; i++) {
                     this.vetorIdades[i] = Integer.parseInt(idadesTela[i]);
                }                 
            } 
            if(frase.substring(0,5).equals("faixa")){
                this.faixa = Integer.parseInt(frase.substring(6));
            }
            
            if(frase.substring(0,4).equals("tipo")){
                String tipoGrafico = frase.substring(5);
                if(tipoGrafico.equals("barra")){
                    this.tipoGrafico = 1;
                }else{
                    this.tipoGrafico = 2;
                }
            }
        }
               
        for (int idade : vetorIdades) {
            if(idade >this.maiorIdade){
                this.maiorIdade = idade;
            }            
        }
                
        int range = this.maiorIdade / this.faixa;                                
        //prepara vetor range
        this.vetRanges = new int[faixa+1][3];
        int x = 0; 
        int v = 0;
        for (int j = 0; j < vetRanges.length; j++) { 
           
            if(x > this.faixa ){
                this.vetRanges[x][0]=v + 1 ;//limite inferior
                this.vetRanges[x][1]=v + range;//limitesuperior
            }else{
                this.vetRanges[x][0]= v + 1 ;//limite inferior
                this.vetRanges[x][1]= v + range;//limitesuperior
                
            }
             x++;
             v = range +v;
        } 
        
        //prepara vetor Valores dos Ranges               
       /* for (int i = 0 ; this.vetRanges[i][1] < maiorIdade; i++) {  
            for (int j = 0; vetorIdades[j]>0 ; j++) {
                    //valorIdade       //limiteInferior         //valorIdade    //limiteSuperior
                if(this.vetorIdades[j] >= this.vetRanges[i][0]  && this.vetorIdades[j] <= this.vetRanges[i][1]   ){
                    this.vetRanges[i][2]= this.vetRanges[i][2]+1 ;
                }            
            }                            
        }*/
       
       for (int i = 0; i < vetRanges.length; i++) {
           for (int j = 0; vetorIdades[j]>0 ; j++) {
                    //valorIdade       //limiteInferior         //valorIdade    //limiteSuperior
                if(this.vetorIdades[j] >= this.vetRanges[i][0]  && this.vetorIdades[j] <= this.vetRanges[i][1]   ){
                    this.vetRanges[i][2]= this.vetRanges[i][2]+1 ;
                }            
            }  
       }
       
               
 
    }
   
   
   public CategoryDataset criaDataSetBar(){  
   DefaultCategoryDataset dataset = new DefaultCategoryDataset();
            for (int i = 0; i < vetRanges.length; i++) {
                String ranges = " "+this.vetRanges[i][0] +" - "+" "+this.vetRanges[i][1]+" ";
                dataset.addValue(this.vetRanges[i][2],ranges,"numero/rangeIdade");
            } 
            
         return  dataset;
   }        
    public PieDataset criaDataSetPie(){    
         //dataset.addValue(1000.0,"01/2012","Mês/Ano");
        
        DefaultPieDataset datasetPie = new DefaultPieDataset();
        for (int i = 0; i < vetRanges.length; i++) {
            String ranges = " "+this.vetRanges[i][0]+" - "+" "+this.vetRanges[i][1]+" ";
            datasetPie.setValue(ranges,this.vetRanges[i][2]);
        }         
        return  datasetPie;
     }

    
    
   public void criaGrafico() {
        
       this.preparaDataset();
   
       if(this.tipoGrafico == 1){
            this.cds = this.criaDataSetBar();
       }else{
            this.cdsPie = this.criaDataSetPie();
       }
        //DefaultPieDataset cdsPie = (DefaultPieDataset) createDataset();
     
        String eixoy = "Valores";
        String txt_legenda = "Ledenda:";
        boolean legenda = true;
        boolean tooltips = true;
        boolean urls = true;
        JFreeChart graf;
        if(this.tipoGrafico == 1){
           
             graf = ChartFactory.createBarChart3D("Gráfico de Idades", txt_legenda, eixoy, this.cds, PlotOrientation.VERTICAL, legenda, tooltips, urls);
        }else{
          
           //  graf =  ChartFactory.createPieChart(titulo, cdsPie);
            graf = ChartFactory.createPieChart("Gráfico Pizza Idades ",  this.cdsPie, true, true, false);
        }
        
         
        ChartPanel myChartPanel = new ChartPanel(graf, true);
        myChartPanel.setSize(500, 300);
        myChartPanel.setVisible(true);
        this.removeAll();
        this.add(myChartPanel);
        this.revalidate();
        this.repaint();
    }

   
   public void mostrarCamposGeracaoGrafico(){
       
                this.entrarDados.setVisible(true);
               this.l1.setVisible(true);
                this.l2.setVisible(true);
                this.l3.setVisible(true);
                this.gerarGráfico.setVisible(true);
                this.textoComando.setVisible(true);
   }
   
     public void escnderCamposGeracaoGrafico(){
       
               // this.entrarDados.setVisible(false);
                this.l1.setVisible(false);
                this.l2.setVisible(false);
                this.l3.setVisible(false);
               // this.gerarGráfico.setVisible(false);
                this.textoComando.setVisible(false);
   }     
     
    public int tratarTxtComandoFaixa(String txt) {
        int intFaixa = txt.indexOf("faixa")+5;
        //int intFaixa = posFaixa +1;
        int valorFaixa =5;// Integer.parseInt(txt.substring(intFaixa, intFaixa+1)); 
        
        return valorFaixa;
    }
    
     public int tratarTxtComandoTipoGrafico(String txt) {
        int intGrafico = txt.indexOf("grafico")+7;
        //int intFaixa = posFaixa +1;
        int valorGrafico = 1;//Integer.parseInt(txt.substring(intGrafico, intGrafico+1)); 
        
        return valorGrafico;
    }

    public int[] tratarTxtComandoPlotarIdades(String txtPlotar) {
       
        int idades[] = new int[50];
        int i =0;
       /* while(txtPlotar.indexOf(txtPlotar)!= -1){
            while(){
                int idade = txtPlotar.indexOf(";")-2;
                txtPlotar.sp
                txtPlotar.replaceFirst(";", "*");
                idades[i] = idade;
            }
        }*/
        
        return idades;
    }
  
}
